---
source: src/parser/mod.rs
assertion_line: 589
expression: asts
input_file: src/parser/tests/inputs/block.input
---
- - "if foo { bar }"
  - Ok:
      nodes:
        - Expr:
            Cond:
              cond_expr:
                Ident:
                  name: foo
                  ty: ~
              then_block:
                Block:
                  list:
                    - Expr:
                        Ident:
                          name: bar
                          ty: ~
                  ty: ~
              else_block: ~
              ty: ~
  - "(if foo '(bar))"
- - "if foo {}"
  - Ok:
      nodes:
        - Expr:
            Cond:
              cond_expr:
                Ident:
                  name: foo
                  ty: ~
              then_block:
                Block:
                  list: []
                  ty: ~
              else_block: ~
              ty: ~
  - "(if foo '()))"
- - if foo
  - Err:
      message: "Expecting '{' to start block. Got EOF"
      line: 0
      column: 0
  - "Parsing error: Expecting '{' to start block. Got EOF"
- - "if foo {"
  - Err:
      message: "Expecting '}' to terminate block"
      line: 0
      column: 0
  - "Parsing error: Expecting '}' to terminate block"
- - "let x: int = { 1 }"
  - Ok:
      nodes:
        - Stmt:
            Let:
              name: x
              antn: Int32
              init:
                Expr:
                  Block:
                    list:
                      - Expr:
                          Lit:
                            value:
                              UInt64: 1
                            ty: ~
                    ty: ~
  - "(let x:int32 '(1))"
- - "y = { 1 + 4; foo(); 4 / 2 }"
  - Ok:
      nodes:
        - Expr:
            BinOp:
              sym: Assign
              lhs:
                Expr:
                  Ident:
                    name: y
                    ty: ~
              rhs:
                Expr:
                  Block:
                    list:
                      - Expr:
                          BinOp:
                            sym: Add
                            lhs:
                              Expr:
                                Lit:
                                  value:
                                    UInt64: 1
                                  ty: ~
                            rhs:
                              Expr:
                                Lit:
                                  value:
                                    UInt64: 4
                                  ty: ~
                            ty: ~
                      - Expr:
                          Call:
                            name: foo
                            args: []
                            ty: ~
                      - Expr:
                          BinOp:
                            sym: Div
                            lhs:
                              Expr:
                                Lit:
                                  value:
                                    UInt64: 4
                                  ty: ~
                            rhs:
                              Expr:
                                Lit:
                                  value:
                                    UInt64: 2
                                  ty: ~
                            ty: ~
                    ty: ~
              ty: ~
  - "(= y '((+ 1 4) (foo) (/ 4 2)))"

