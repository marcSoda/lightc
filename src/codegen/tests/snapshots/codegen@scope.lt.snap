---
source: src/codegen/mod.rs
assertion_line: 834
expression: ir
input_file: src/codegen/tests/inputs/scope.lt
---
- - "// basic shadowing\nfn foo(a: int) -> int {\n    let b: int = 1\n    {\n        let b: bool = false\n    }\n    b\n}\nfn main() { foo(3) }\n"
  - "define i32 @main() {\nentry:\n  %call_foo = call i32 @foo(i32 3)\n  ret i32 %call_foo\n}\n"
- - "\n// nested shadowing\nfn foo(a: int) -> int {\n    let b: int = 1\n    {\n        let b: bool = false\n        let a: float = {\n            let b: float = 1.0\n            b\n        }\n    }\n    b\n}\nfn main() { foo(3) }\n"
  - "define i32 @main() {\nentry:\n  %call_foo = call i32 @foo(i32 3)\n  ret i32 %call_foo\n}\n"
- - "\n// for scope\nfn foo() {\n    let x: float = 1.0\n    for x: int = 1; x < 10; 1 {\n        x\n    }\n    x\n}\nfn main() { foo() }\n"
  - "define i32 @main() {\nentry:\n  call void @foo()\n  ret i32 0\n}\n"
- - "\n// if scope\nfn foo() {\n    let x: float = 1.0\n    if x < 2.0 {\n        let y: int = 2\n        x\n    }\n    x\n}\nfn main() { foo() }\n"
  - "define i32 @main() {\nentry:\n  call void @foo()\n  ret i32 0\n}\n"
- - "\n// if else scope\nfn foo() {\n    let x: float = 1.0\n    if x < 2.0 {\n        let y: int = 2\n        y\n    } else {\n        let y: int = -2\n        y\n    }\n}\nfn main() { foo() }\n"
  - "define i32 @main() {\nentry:\n  call void @foo()\n  ret i32 0\n}\n"

