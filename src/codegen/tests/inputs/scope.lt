// basic shadowing
fn foo(a: int) -> int {
    let b: int = 1
    {
        let b: bool = false
    }
    b
}
fn main() { foo(3) }
#test_delim#

// nested shadowing
fn foo(a: int) -> int {
    let b: int = 1
    {
        let b: bool = false
        let a: float = {
            let b: float = 1.0
            b
        }
    }
    b
}
fn main() { foo(3) }
#test_delim#

// for scope
fn foo() {
    let x: float = 1.0
    for x: int = 1; x < 10; 1 {
        x
    }
    x
}
fn main() { foo() }
#test_delim#

// if scope
fn foo() {
    let x: float = 1.0
    if x < 2.0 {
        let y: int = 2
        x
    }
    x
}
fn main() { foo() }
#test_delim#

// if else scope
fn foo() {
    let x: float = 1.0
    if x < 2.0 {
        let y: int = 2
        y
    } else {
        let y: int = -2
        y
    }
}
fn main() { foo() }
#test_delim#
