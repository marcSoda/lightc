---
source: src/type_checker/mod.rs
assertion_line: 520
expression: asts
input_file: src/type_checker/tests/inputs/for.lt
---
- - "// basic\nfn foo() {\n    for x: int8 = 1; x < 2; 1 {\n        x\n    }\n}\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: foo
                args: []
                ret_ty: Void
              body:
                Block:
                  list:
                    - Stmt:
                        For:
                          start_name: x
                          start_antn: Int8
                          start_expr:
                            Lit:
                              value:
                                Int8: 1
                              ty: Int8
                          cond_expr:
                            BinOp:
                              sym: Lt
                              lhs:
                                Expr:
                                  Ident:
                                    name: x
                                    ty: Int8
                              rhs:
                                Expr:
                                  Lit:
                                    value:
                                      Int8: 2
                                    ty: Int8
                              ty: Bool
                          step_expr:
                            Lit:
                              value:
                                Int8: 1
                              ty: Int8
                          body:
                            Block:
                              list:
                                - Expr:
                                    Ident:
                                      name: x
                                      ty: Int8
                              ty: Int8
                  ty: Void
- - "\n// for shadowing\nfn foo() {\n    let x: int32 = 1\n    for x: int8 = 1; x < 2; 1 {\n        x\n    }\n    x\n}\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: foo
                args: []
                ret_ty: Void
              body:
                Block:
                  list:
                    - Stmt:
                        Let:
                          name: x
                          antn: Int32
                          init:
                            Expr:
                              Lit:
                                value:
                                  Int32: 1
                                ty: Int32
                    - Stmt:
                        For:
                          start_name: x
                          start_antn: Int8
                          start_expr:
                            Lit:
                              value:
                                Int8: 1
                              ty: Int8
                          cond_expr:
                            BinOp:
                              sym: Lt
                              lhs:
                                Expr:
                                  Ident:
                                    name: x
                                    ty: Int8
                              rhs:
                                Expr:
                                  Lit:
                                    value:
                                      Int8: 2
                                    ty: Int8
                              ty: Bool
                          step_expr:
                            Lit:
                              value:
                                Int8: 1
                              ty: Int8
                          body:
                            Block:
                              list:
                                - Expr:
                                    Ident:
                                      name: x
                                      ty: Int8
                              ty: Int8
                    - Expr:
                        Ident:
                          name: x
                          ty: Int32
                  ty: Int32
- - "\n// antn mismatch\nfn foo() {\n    for x: int8 = 1.0; x < 2; 1 {\n        x\n    }\n}\n"
  - Err: Literal is a float in an integer context
- - "\n// antn mismatch\nfn foo() {\n    let y: int8 = 2\n    for x: int = y; x < 2; 1 {\n        x\n    }\n}\n"
  - Err: "Initial type mismatch in for statement. Annotated with `int32` but value is `int8`"
- - "\n// cond should be bool\nfn foo() {\n    for x: int = 1; 2.0; 1 {\n        x\n    }\n}\n"
  - Err: For loop conditional should always be a bool
- - "\n// literal step mismatch\nfn foo() {\n    for x: int = 1; x < 3; 1.0 {\n        x\n    }\n}\n"
  - Err: Literal is a float in an integer context
- - "\n// step mismatch\nfn foo() {\n    let y: int8 = 2\n    for x: int = 1; x < 3; y {\n        x\n    }\n}\n"
  - Err: "Step type mismatch in for statement. Step is `int8` but `x` is `int32`"

