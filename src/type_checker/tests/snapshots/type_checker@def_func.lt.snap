---
source: src/type_checker/mod.rs
assertion_line: 517
expression: asts
input_file: src/type_checker/tests/inputs/def_func.lt
---
- - "// basic\nfn foo() {\n    1\n}\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: foo
                args: []
                ret_ty: Void
              body:
                Block:
                  list:
                    - Expr:
                        Lit:
                          value:
                            Int32: 1
                          ty: Int32
                  ty: Int32
- - "\n// void ret and body\nfn bar() { }\nfn foo() {\n    bar()\n}\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: bar
                args: []
                ret_ty: Void
              body:
                Block:
                  list: []
                  ty: Void
        - Stmt:
            Fn:
              proto:
                name: foo
                args: []
                ret_ty: Void
              body:
                Block:
                  list:
                    - Expr:
                        Call:
                          name: bar
                          args: []
                          ty: Void
                  ty: Void
- - "\n// void ret; expr body\nfn foo(a: int) {\n    a + 1\n}\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: foo
                args:
                  - - a
                    - Int32
                ret_ty: Void
              body:
                Block:
                  list:
                    - Expr:
                        BinOp:
                          sym: Add
                          lhs:
                            Expr:
                              Ident:
                                name: a
                                ty: Int32
                          rhs:
                            Expr:
                              Lit:
                                value:
                                  Int32: 1
                                ty: Int32
                          ty: Int32
                  ty: Int32
- - "\n// multiple args\nfn foo(a: int, b: float) { }\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: foo
                args:
                  - - a
                    - Int32
                  - - b
                    - Float
                ret_ty: Void
              body:
                Block:
                  list: []
                  ty: Void
- - "\n// expected int in last statement\nfn foo(a: int, b: float) -> int { }\n"
  - Err: "Function `foo` should return type `int32` but last statement is `void`"
- - "\n// expected int in last statement\nfn foo(a: int, b: float) -> int {\n    1.0\n}\n"
  - Err: "Function `foo` should return type `int32` but last statement is `float`"
- - "\n// can't redefine\nfn foo() { }\nfn foo() { }\n"
  - Err: "Function `foo` can't be redefined"
- - "\n// extern\nextern foo()\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: foo
                args: []
                ret_ty: ~
              body: ~
- - "\n// statement at end of body\nfn foo() {\n    let a: int8 = 1\n}\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: foo
                args: []
                ret_ty: Void
              body:
                Block:
                  list:
                    - Stmt:
                        Let:
                          name: a
                          antn: Int8
                          init:
                            Expr:
                              Lit:
                                value:
                                  Int8: 1
                                ty: Int8
                  ty: Void
- - "\n// main exits as int32\nfn main() { }\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: main
                args: []
                ret_ty: Int32
              body:
                Block:
                  list:
                    - Expr:
                        Lit:
                          value:
                            Int32: 0
                          ty: Int32
                  ty: Void
- - "\n// main exits as int32\nfn main() { 1 }\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: main
                args: []
                ret_ty: Int32
              body:
                Block:
                  list:
                    - Expr:
                        Lit:
                          value:
                            Int32: 1
                          ty: Int32
                  ty: Int32
- - "\n// main exits as int32\nfn main() -> float { 1.0 }\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: main
                args: []
                ret_ty: Int32
              body:
                Block:
                  list:
                    - Expr:
                        Lit:
                          value:
                            Float: 1.0
                          ty: Float
                    - Expr:
                        Lit:
                          value:
                            Int32: 0
                          ty: Int32
                  ty: Float

