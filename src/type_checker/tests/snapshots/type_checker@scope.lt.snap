---
source: src/type_checker/mod.rs
assertion_line: 537
expression: asts
input_file: src/type_checker/tests/inputs/scope.lt
---
- - "// basic shadowing\nfn foo(a: int) -> int {\n    let b: int = 1\n    {\n        let b: bool = false\n    }\n    b\n}\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: foo
                args:
                  - - a
                    - Int32
                ret_ty: Int32
              body:
                Block:
                  list:
                    - Stmt:
                        Let:
                          name: b
                          antn: Int32
                          init:
                            Expr:
                              Lit:
                                value:
                                  Int32: 1
                                ty: Int32
                    - Expr:
                        Block:
                          list:
                            - Stmt:
                                Let:
                                  name: b
                                  antn: Bool
                                  init:
                                    Expr:
                                      Lit:
                                        value:
                                          Bool: false
                                        ty: Bool
                          ty: Void
                    - Expr:
                        Ident:
                          name: b
                          ty: Int32
                  ty: Int32
- - "\n// nested shadowing\nfn foo(a: int) -> int {\n    let b: int = 1\n    {\n        let b: bool = false\n        let a: float = {\n            let b: float = 1.0\n            b\n        }\n    }\n    b\n}\n"
  - Ok:
      nodes:
        - Stmt:
            Fn:
              proto:
                name: foo
                args:
                  - - a
                    - Int32
                ret_ty: Int32
              body:
                Block:
                  list:
                    - Stmt:
                        Let:
                          name: b
                          antn: Int32
                          init:
                            Expr:
                              Lit:
                                value:
                                  Int32: 1
                                ty: Int32
                    - Expr:
                        Block:
                          list:
                            - Stmt:
                                Let:
                                  name: b
                                  antn: Bool
                                  init:
                                    Expr:
                                      Lit:
                                        value:
                                          Bool: false
                                        ty: Bool
                            - Stmt:
                                Let:
                                  name: a
                                  antn: Float
                                  init:
                                    Expr:
                                      Block:
                                        list:
                                          - Stmt:
                                              Let:
                                                name: b
                                                antn: Float
                                                init:
                                                  Expr:
                                                    Lit:
                                                      value:
                                                        Float: 1.0
                                                      ty: Float
                                          - Expr:
                                              Ident:
                                                name: b
                                                ty: Float
                                        ty: Float
                          ty: Void
                    - Expr:
                        Ident:
                          name: b
                          ty: Int32
                  ty: Int32
- - "\n// delete scope\nfn foo(a: int) -> int {\n    let b: int = 1\n    {\n        let c: int = 2\n    }\n    c\n}\n"
  - Err: "Unknown variable: `c`"
- - "\n// for scope\nlet x: float = 1.0\nfor x: int = 1; x < 10; 1 {\n    x\n}\nx\n"
  - Ok:
      nodes:
        - Stmt:
            Let:
              name: x
              antn: Float
              init:
                Expr:
                  Lit:
                    value:
                      Float: 1.0
                    ty: Float
        - Stmt:
            For:
              start_name: x
              start_antn: Int32
              start_expr:
                Lit:
                  value:
                    Int32: 1
                  ty: Int32
              cond_expr:
                BinOp:
                  sym: Lt
                  lhs:
                    Expr:
                      Ident:
                        name: x
                        ty: Int32
                  rhs:
                    Expr:
                      Lit:
                        value:
                          Int32: 10
                        ty: Int32
                  ty: Bool
              step_expr:
                Lit:
                  value:
                    Int32: 1
                  ty: Int32
              body:
                Block:
                  list:
                    - Expr:
                        Ident:
                          name: x
                          ty: Int32
                  ty: Int32
        - Expr:
            Ident:
              name: x
              ty: Float
- - "\n// if scope\nlet x: float = 1.0\nif x < 2.0 {\n    let y: int = 2\n    x\n}\ny\n"
  - Err: "Unknown variable: `y`"
- - "\n// if else scope\nlet x: float = 1.0\nif x < 2.0 {\n    let y: int = 2\n    x\n} else {\n    -y\n}\n"
  - Err: "Unknown variable: `y`"

