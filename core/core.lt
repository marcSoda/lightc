module core

extern fn putchar(x: int)
extern fn exit(status: int)

fn printDot() {
    putchar(46)
    putchar(10)
}

fn printBang() {
    putchar(33)
    putchar(10)
}

fn printInt(x: int) {
    putchar(x + 48)
    putchar(10)
}

fn exit(status: int) {
    exit(status)
}

fn terminate() {
    exit(251)
}

struct String {
    let buffer: [char; 9]
    let size: int
    let capacity: int

    fn init(size: int) {
        self.capacity = size
        self.size = size
    }
}

struct Array {
    let buffer: [int; 5]
    let size: int
    let capacity: int

    fn init() {
        self.capacity = 5
        self.size = 0
    }

    fn len() -> int {
        self.size
    }

    fn capacity() -> int {
        self.capacity
    }

    fn get(index: int) -> int {
        if index > self.size {
            terminate()
        }
        self.buffer[index]
    }

    fn insert(index: int, value: int) {
        self.buffer[index] = value
    }

    fn push(value: int) {
        self.buffer[self.size] = value
        self.size += 1
    }
}
