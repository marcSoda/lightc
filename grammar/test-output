[@0,0:5='extern',<'extern'>,1:0]
[@1,7:8='fn',<'fn'>,1:7]
[@2,10:16='putchar',<IDENT>,1:10]
[@3,17:17='(',<'('>,1:17]
[@4,18:18='x',<IDENT>,1:18]
[@5,19:19=':',<':'>,1:19]
[@6,21:23='int',<TYPE>,1:21]
[@7,24:24=')',<')'>,1:24]
[@8,25:25=';',<';'>,1:25]
[@9,28:29='fn',<'fn'>,3:0]
[@10,31:33='foo',<IDENT>,3:3]
[@11,34:34='(',<'('>,3:6]
[@12,35:35=')',<')'>,3:7]
[@13,37:38='->',<'->'>,3:9]
[@14,40:42='int',<TYPE>,3:12]
[@15,44:44='{',<'{'>,3:16]
[@16,50:50='3',<NUMBER>,4:4]
[@17,52:52='+',<'+'>,4:6]
[@18,54:54='3',<NUMBER>,4:8]
[@19,55:55=';',<';'>,4:9]
[@20,57:57='}',<'}'>,5:0]
[@21,58:58=';',<';'>,5:1]
[@22,74:75='fn',<'fn'>,8:0]
[@23,77:79='bar',<IDENT>,8:3]
[@24,80:80='(',<'('>,8:6]
[@25,81:81='x',<IDENT>,8:7]
[@26,82:82=':',<':'>,8:8]
[@27,84:86='int',<TYPE>,8:10]
[@28,87:87=')',<')'>,8:13]
[@29,89:89='{',<'{'>,8:15]
[@30,90:90='}',<'}'>,8:16]
[@31,91:91=';',<';'>,8:17]
[@32,94:95='fn',<'fn'>,10:0]
[@33,97:99='baz',<IDENT>,10:3]
[@34,100:100='(',<'('>,10:6]
[@35,101:101='x',<IDENT>,10:7]
[@36,102:102=':',<':'>,10:8]
[@37,104:106='int',<TYPE>,10:10]
[@38,107:107=',',<','>,10:13]
[@39,109:109='y',<IDENT>,10:15]
[@40,110:110=':',<':'>,10:16]
[@41,112:114='int',<TYPE>,10:18]
[@42,115:115=')',<')'>,10:21]
[@43,117:117='{',<'{'>,10:23]
[@44,118:118='}',<'}'>,10:24]
[@45,119:119=';',<';'>,10:25]
[@46,122:123='fn',<'fn'>,12:0]
[@47,125:128='main',<IDENT>,12:3]
[@48,129:129='(',<'('>,12:7]
[@49,130:130=')',<')'>,12:8]
[@50,132:132='{',<'{'>,12:10]
[@51,138:140='let',<'let'>,13:4]
[@52,142:142='x',<IDENT>,13:8]
[@53,143:143=':',<':'>,13:9]
[@54,145:147='int',<TYPE>,13:11]
[@55,149:149='=',<'='>,13:15]
[@56,151:151='2',<NUMBER>,13:17]
[@57,153:153='+',<'+'>,13:19]
[@58,155:155='5',<NUMBER>,13:21]
[@59,157:157='*',<'*'>,13:23]
[@60,159:159='4',<NUMBER>,13:25]
[@61,160:160=';',<';'>,13:26]
[@62,166:168='for',<'for'>,14:4]
[@63,170:170='i',<IDENT>,14:8]
[@64,171:171=':',<':'>,14:9]
[@65,173:175='int',<TYPE>,14:11]
[@66,177:177='=',<'='>,14:15]
[@67,179:179='1',<NUMBER>,14:17]
[@68,180:180=';',<';'>,14:18]
[@69,182:182='i',<IDENT>,14:20]
[@70,184:184='<',<'<'>,14:22]
[@71,186:186='x',<IDENT>,14:24]
[@72,187:187=';',<';'>,14:25]
[@73,189:189='1',<NUMBER>,14:27]
[@74,191:191='{',<'{'>,14:29]
[@75,201:201='x',<IDENT>,15:8]
[@76,203:203='=',<'='>,15:10]
[@77,205:205='(',<'('>,15:12]
[@78,206:206='3',<NUMBER>,15:13]
[@79,208:208='-',<'-'>,15:15]
[@80,210:210='4',<NUMBER>,15:17]
[@81,211:211=')',<')'>,15:18]
[@82,213:213='/',<'/'>,15:20]
[@83,215:215='2',<NUMBER>,15:22]
[@84,216:216=';',<';'>,15:23]
[@85,226:227='if',<'if'>,16:8]
[@86,229:229='x',<IDENT>,16:11]
[@87,231:231='>',<'>'>,16:13]
[@88,233:234='10',<NUMBER>,16:15]
[@89,236:236='{',<'{'>,16:18]
[@90,250:250='x',<IDENT>,17:12]
[@91,252:252='=',<'='>,17:14]
[@92,254:254='8',<NUMBER>,17:16]
[@93,255:255=';',<';'>,17:17]
[@94,265:265='}',<'}'>,18:8]
[@95,266:266=';',<';'>,18:9]
[@96,272:272='}',<'}'>,19:4]
[@97,273:273=';',<';'>,19:5]
[@98,280:281='if',<'if'>,21:4]
[@99,283:283='x',<IDENT>,21:7]
[@100,285:286='>=',<'>='>,21:9]
[@101,288:288='3',<NUMBER>,21:12]
[@102,290:290='{',<'{'>,21:14]
[@103,300:302='let',<'let'>,22:8]
[@104,304:304='y',<IDENT>,22:12]
[@105,305:305=':',<':'>,22:13]
[@106,307:309='int',<TYPE>,22:15]
[@107,311:311='=',<'='>,22:19]
[@108,313:313='2',<NUMBER>,22:21]
[@109,314:314=';',<';'>,22:22]
[@110,324:324='-',<'-'>,23:8]
[@111,325:325='y',<IDENT>,23:9]
[@112,326:326=';',<';'>,23:10]
[@113,332:332='}',<'}'>,24:4]
[@114,334:337='else',<'else'>,24:6]
[@115,339:339='{',<'{'>,24:11]
[@116,349:349='x',<IDENT>,25:8]
[@117,351:351='+',<'+'>,25:10]
[@118,353:353='1',<NUMBER>,25:12]
[@119,355:355='*',<'*'>,25:14]
[@120,357:357='4',<NUMBER>,25:16]
[@121,358:358=';',<';'>,25:17]
[@122,364:364='}',<'}'>,26:4]
[@123,365:365=';',<';'>,26:5]
[@124,372:373='if',<'if'>,28:4]
[@125,375:375='x',<IDENT>,28:7]
[@126,377:378='==',<'=='>,28:9]
[@127,380:381='10',<NUMBER>,28:12]
[@128,383:383='{',<'{'>,28:15]
[@129,393:393='-',<'-'>,29:8]
[@130,394:394='x',<IDENT>,29:9]
[@131,395:395=';',<';'>,29:10]
[@132,401:401='}',<'}'>,30:4]
[@133,403:406='else',<'else'>,30:6]
[@134,408:409='if',<'if'>,30:11]
[@135,411:411='x',<IDENT>,30:14]
[@136,413:413='>',<'>'>,30:16]
[@137,415:416='10',<NUMBER>,30:18]
[@138,418:418='{',<'{'>,30:21]
[@139,428:430='foo',<IDENT>,31:8]
[@140,431:431=';',<';'>,31:11]
[@141,437:437='}',<'}'>,32:4]
[@142,439:442='else',<'else'>,32:6]
[@143,444:445='if',<'if'>,32:11]
[@144,447:447='x',<IDENT>,32:14]
[@145,449:449='<',<'<'>,32:16]
[@146,451:452='10',<NUMBER>,32:18]
[@147,454:454='{',<'{'>,32:21]
[@148,464:467='foob',<IDENT>,33:8]
[@149,468:468=';',<';'>,33:12]
[@150,474:474='}',<'}'>,34:4]
[@151,476:479='else',<'else'>,34:6]
[@152,481:481='{',<'{'>,34:11]
[@153,491:491='-',<'-'>,35:8]
[@154,492:492='!',<'!'>,35:9]
[@155,493:493='-',<'-'>,35:10]
[@156,494:494='x',<IDENT>,35:11]
[@157,495:495=';',<';'>,35:12]
[@158,501:501='}',<'}'>,36:4]
[@159,502:502=';',<';'>,36:5]
[@160,509:511='let',<'let'>,38:4]
[@161,513:513='a',<IDENT>,38:8]
[@162,514:514=':',<':'>,38:9]
[@163,516:516='[',<'['>,38:11]
[@164,517:519='int',<TYPE>,38:12]
[@165,520:520=']',<']'>,38:15]
[@166,522:522='=',<'='>,38:17]
[@167,524:524='[',<'['>,38:19]
[@168,525:525=']',<']'>,38:20]
[@169,526:526=';',<';'>,38:21]
[@170,532:532='a',<IDENT>,39:4]
[@171,534:534='=',<'='>,39:6]
[@172,536:536='[',<'['>,39:8]
[@173,537:537='1',<NUMBER>,39:9]
[@174,538:538=',',<','>,39:10]
[@175,540:540='2',<NUMBER>,39:12]
[@176,541:541=',',<','>,39:13]
[@177,543:543='3',<NUMBER>,39:15]
[@178,544:544=']',<']'>,39:16]
[@179,545:545=';',<';'>,39:17]
[@180,551:551='x',<IDENT>,40:4]
[@181,553:553='=',<'='>,40:6]
[@182,555:555='a',<IDENT>,40:8]
[@183,556:556='[',<'['>,40:9]
[@184,557:557='0',<NUMBER>,40:10]
[@185,558:558=']',<']'>,40:11]
[@186,559:559=';',<';'>,40:12]
[@187,565:565='x',<IDENT>,41:4]
[@188,567:567='=',<'='>,41:6]
[@189,569:569='a',<IDENT>,41:8]
[@190,570:570='[',<'['>,41:9]
[@191,571:571='1',<NUMBER>,41:10]
[@192,573:573='+',<'+'>,41:12]
[@193,575:575='1',<NUMBER>,41:14]
[@194,576:576=']',<']'>,41:15]
[@195,577:577=';',<';'>,41:16]
[@196,584:586='foo',<IDENT>,43:4]
[@197,587:587='(',<'('>,43:7]
[@198,588:588=')',<')'>,43:8]
[@199,589:589=';',<';'>,43:9]
[@200,595:597='bar',<IDENT>,44:4]
[@201,598:598='(',<'('>,44:7]
[@202,599:599='x',<IDENT>,44:8]
[@203,600:600=')',<')'>,44:9]
[@204,601:601=';',<';'>,44:10]
[@205,607:609='baz',<IDENT>,45:4]
[@206,610:610='(',<'('>,45:7]
[@207,611:611='x',<IDENT>,45:8]
[@208,612:612=',',<','>,45:9]
[@209,614:614='y',<IDENT>,45:11]
[@210,615:615=')',<')'>,45:12]
[@211,616:616=';',<';'>,45:13]
[@212,622:624='let',<'let'>,46:4]
[@213,626:626='y',<IDENT>,46:8]
[@214,627:627=':',<':'>,46:9]
[@215,629:631='int',<TYPE>,46:11]
[@216,632:632=';',<';'>,46:14]
[@217,638:640='let',<'let'>,47:4]
[@218,642:642='c',<IDENT>,47:8]
[@219,643:643=':',<':'>,47:9]
[@220,645:648='char',<TYPE>,47:11]
[@221,650:650='=',<'='>,47:16]
[@222,652:654=''c'',<CHAR>,47:18]
[@223,655:655=';',<';'>,47:21]
[@224,661:661='c',<IDENT>,48:4]
[@225,663:663='=',<'='>,48:6]
[@226,665:668=''\n'',<CHAR>,48:8]
[@227,669:669=';',<';'>,48:12]
[@228,671:671='}',<'}'>,49:0]
[@229,672:672=';',<';'>,49:1]
[@230,675:680='struct',<'struct'>,51:0]
[@231,682:684='Foo',<IDENT>,51:7]
[@232,686:686='{',<'{'>,51:11]
[@233,692:694='bar',<IDENT>,52:4]
[@234,695:695=':',<':'>,52:7]
[@235,697:699='int',<TYPE>,52:9]
[@236,700:700=';',<';'>,52:12]
[@237,706:708='baz',<IDENT>,53:4]
[@238,709:709=':',<':'>,53:7]
[@239,711:715='float',<TYPE>,53:9]
[@240,716:716=';',<';'>,53:14]
[@241,723:724='fn',<'fn'>,55:4]
[@242,726:731='method',<IDENT>,55:7]
[@243,732:732='(',<'('>,55:13]
[@244,733:733=')',<')'>,55:14]
[@245,735:735='{',<'{'>,55:16]
[@246,745:748='self',<'self'>,56:8]
[@247,749:749='.',<'.'>,56:12]
[@248,750:752='bar',<IDENT>,56:13]
[@249,754:754='=',<'='>,56:17]
[@250,756:759='self',<'self'>,56:19]
[@251,760:760='.',<'.'>,56:23]
[@252,761:763='bar',<IDENT>,56:24]
[@253,765:765='+',<'+'>,56:28]
[@254,767:767='1',<NUMBER>,56:30]
[@255,768:768=';',<';'>,56:31]
[@256,774:774='}',<'}'>,57:4]
[@257,775:775=';',<';'>,57:5]
[@258,777:777='}',<'}'>,58:0]
[@259,778:778=';',<';'>,58:1]
[@260,780:779='<EOF>',<EOF>,59:0]
(program (stmt_list (stmt (extern_decl extern (proto fn putchar ( (typed_decl x : (type_antn int)) )))) ; (stmt (fn_decl (proto fn foo ( ) -> (type_antn int)) (block { (stmt_list (stmt (expr (expr (primary_expr (lit_expr 3))) + (expr (primary_expr (lit_expr 3))))) ;) }))) ; (stmt (fn_decl (proto fn bar ( (typed_decl x : (type_antn int)) )) (block { }))) ; (stmt (fn_decl (proto fn baz ( (typed_decl x : (type_antn int)) , (typed_decl y : (type_antn int)) )) (block { }))) ; (stmt (fn_decl (proto fn main ( )) (block { (stmt_list (stmt (let_stmt let (typed_decl x : (type_antn int)) = (expr (expr (primary_expr (lit_expr 2))) + (expr (expr (primary_expr (lit_expr 5))) * (expr (primary_expr (lit_expr 4))))))) ; (stmt (for_stmt for (typed_decl i : (type_antn int)) = (expr (primary_expr (lit_expr 1))) ; (expr (expr (primary_expr (ident_expr i))) < (expr (primary_expr (ident_expr x)))) ; 1 (block { (stmt_list (stmt (expr (ident_expr x) = (expr (expr (primary_expr (paren_expr ( (expr (expr (primary_expr (lit_expr 3))) - (expr (primary_expr (lit_expr 4)))) )))) / (expr (primary_expr (lit_expr 2)))))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) > (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (ident_expr x) = (expr (primary_expr (lit_expr 8))))) ;) }))))) ;) }))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) >= (expr (primary_expr (lit_expr 3)))) (block { (stmt_list (stmt (let_stmt let (typed_decl y : (type_antn int)) = (expr (primary_expr (lit_expr 2))))) ; (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr y))))))) ;) }) else (block { (stmt_list (stmt (expr (expr (primary_expr (ident_expr x))) + (expr (expr (primary_expr (lit_expr 1))) * (expr (primary_expr (lit_expr 4)))))) ;) }))))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) == (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr x))))))) ;) }) else (cond_expr if (expr (expr (primary_expr (ident_expr x))) > (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (ident_expr foo)))) ;) }) else (cond_expr if (expr (expr (primary_expr (ident_expr x))) < (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (ident_expr foob)))) ;) }) else (block { (stmt_list (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (unop_expr ! (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr x))))))))))))) ;) }))))))) ; (stmt (let_stmt let (typed_decl a : (type_antn [ int ])) = (expr (primary_expr (lit_expr (array_lit [ ])))))) ; (stmt (expr (ident_expr a) = (expr (primary_expr (lit_expr (array_lit [ (expr_list (expr (primary_expr (lit_expr 1))) , (expr (primary_expr (lit_expr 2))) , (expr (primary_expr (lit_expr 3)))) ])))))) ; (stmt (expr (ident_expr x) = (expr (primary_expr (primary_expr (ident_expr a)) [ (expr (primary_expr (lit_expr 0))) ])))) ; (stmt (expr (ident_expr x) = (expr (primary_expr (primary_expr (ident_expr a)) [ (expr (expr (primary_expr (lit_expr 1))) + (expr (primary_expr (lit_expr 1)))) ])))) ; (stmt (expr (primary_expr (call_expr foo ( ))))) ; (stmt (expr (primary_expr (call_expr bar ( (expr_list (expr (primary_expr (ident_expr x)))) ))))) ; (stmt (expr (primary_expr (call_expr baz ( (expr_list (expr (primary_expr (ident_expr x))) , (expr (primary_expr (ident_expr y)))) ))))) ; (stmt (let_stmt let (typed_decl y : (type_antn int)))) ; (stmt (let_stmt let (typed_decl c : (type_antn char)) = (expr (primary_expr (lit_expr (char_lit 'c')))))) ; (stmt (expr (ident_expr c) = (expr (primary_expr (lit_expr (char_lit '\n')))))) ;) }))) ; (stmt (struct_decl struct Foo (struct_block { (typed_decl bar : (type_antn int)) ; (typed_decl baz : (type_antn float)) ; (fn_decl (proto fn method ( )) (block { (stmt_list (stmt (expr (self_expr self . (ident_expr bar)) = (expr (expr (primary_expr (self_expr self . (ident_expr bar)))) + (expr (primary_expr (lit_expr 1)))))) ;) })) ; }))) ;))
