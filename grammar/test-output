[@0,0:5='extern',<'extern'>,1:0]
[@1,7:8='fn',<'fn'>,1:7]
[@2,10:16='putchar',<IDENT>,1:10]
[@3,17:17='(',<'('>,1:17]
[@4,18:18='x',<IDENT>,1:18]
[@5,19:19=':',<':'>,1:19]
[@6,21:23='int',<TYPE>,1:21]
[@7,24:24=')',<')'>,1:24]
[@8,25:25=';',<';'>,1:25]
[@9,28:29='fn',<'fn'>,3:0]
[@10,31:34='main',<IDENT>,3:3]
[@11,35:35='(',<'('>,3:7]
[@12,36:36=')',<')'>,3:8]
[@13,38:38='{',<'{'>,3:10]
[@14,44:46='let',<'let'>,4:4]
[@15,48:48='x',<IDENT>,4:8]
[@16,49:49=':',<':'>,4:9]
[@17,51:53='int',<TYPE>,4:11]
[@18,55:55='=',<'='>,4:15]
[@19,57:57='2',<NUMBER>,4:17]
[@20,59:59='+',<'+'>,4:19]
[@21,61:61='5',<NUMBER>,4:21]
[@22,63:63='*',<'*'>,4:23]
[@23,65:65='4',<NUMBER>,4:25]
[@24,66:66=';',<';'>,4:26]
[@25,72:74='for',<'for'>,5:4]
[@26,76:76='i',<IDENT>,5:8]
[@27,77:77=':',<':'>,5:9]
[@28,79:81='int',<TYPE>,5:11]
[@29,83:83='=',<'='>,5:15]
[@30,85:85='1',<NUMBER>,5:17]
[@31,86:86=';',<';'>,5:18]
[@32,88:88='i',<IDENT>,5:20]
[@33,90:90='<',<'<'>,5:22]
[@34,92:92='x',<IDENT>,5:24]
[@35,93:93=';',<';'>,5:25]
[@36,95:95='1',<NUMBER>,5:27]
[@37,97:97='{',<'{'>,5:29]
[@38,107:107='x',<IDENT>,6:8]
[@39,109:109='=',<'='>,6:10]
[@40,111:111='(',<'('>,6:12]
[@41,112:112='3',<NUMBER>,6:13]
[@42,114:114='-',<'-'>,6:15]
[@43,116:116='4',<NUMBER>,6:17]
[@44,117:117=')',<')'>,6:18]
[@45,119:119='/',<'/'>,6:20]
[@46,121:121='2',<NUMBER>,6:22]
[@47,122:122=';',<';'>,6:23]
[@48,132:133='if',<'if'>,7:8]
[@49,135:135='x',<IDENT>,7:11]
[@50,137:137='>',<'>'>,7:13]
[@51,139:140='10',<NUMBER>,7:15]
[@52,142:142='{',<'{'>,7:18]
[@53,156:156='x',<IDENT>,8:12]
[@54,158:158='=',<'='>,8:14]
[@55,160:160='8',<NUMBER>,8:16]
[@56,161:161=';',<';'>,8:17]
[@57,171:171='}',<'}'>,9:8]
[@58,172:172=';',<';'>,9:9]
[@59,178:178='}',<'}'>,10:4]
[@60,179:179=';',<';'>,10:5]
[@61,186:187='if',<'if'>,12:4]
[@62,189:189='x',<IDENT>,12:7]
[@63,191:191='>',<'>'>,12:9]
[@64,193:193='3',<NUMBER>,12:11]
[@65,195:195='{',<'{'>,12:13]
[@66,205:207='let',<'let'>,13:8]
[@67,209:209='y',<IDENT>,13:12]
[@68,210:210=':',<':'>,13:13]
[@69,212:214='int',<TYPE>,13:15]
[@70,216:216='=',<'='>,13:19]
[@71,218:218='2',<NUMBER>,13:21]
[@72,219:219=';',<';'>,13:22]
[@73,229:229='-',<'-'>,14:8]
[@74,230:230='y',<IDENT>,14:9]
[@75,231:231=';',<';'>,14:10]
[@76,237:237='}',<'}'>,15:4]
[@77,239:242='else',<'else'>,15:6]
[@78,244:244='{',<'{'>,15:11]
[@79,254:254='x',<IDENT>,16:8]
[@80,256:256='+',<'+'>,16:10]
[@81,258:258='1',<NUMBER>,16:12]
[@82,260:260='*',<'*'>,16:14]
[@83,262:262='4',<NUMBER>,16:16]
[@84,263:263=';',<';'>,16:17]
[@85,269:269='}',<'}'>,17:4]
[@86,270:270=';',<';'>,17:5]
[@87,277:278='if',<'if'>,19:4]
[@88,280:280='x',<IDENT>,19:7]
[@89,282:283='==',<'=='>,19:9]
[@90,285:286='10',<NUMBER>,19:12]
[@91,288:288='{',<'{'>,19:15]
[@92,298:298='-',<'-'>,20:8]
[@93,299:299='x',<IDENT>,20:9]
[@94,300:300=';',<';'>,20:10]
[@95,306:306='}',<'}'>,21:4]
[@96,308:311='else',<'else'>,21:6]
[@97,313:314='if',<'if'>,21:11]
[@98,316:316='x',<IDENT>,21:14]
[@99,318:318='>',<'>'>,21:16]
[@100,320:321='10',<NUMBER>,21:18]
[@101,323:323='{',<'{'>,21:21]
[@102,333:335='foo',<IDENT>,22:8]
[@103,336:336=';',<';'>,22:11]
[@104,342:342='}',<'}'>,23:4]
[@105,344:347='else',<'else'>,23:6]
[@106,349:350='if',<'if'>,23:11]
[@107,352:352='x',<IDENT>,23:14]
[@108,354:354='<',<'<'>,23:16]
[@109,356:357='10',<NUMBER>,23:18]
[@110,359:359='{',<'{'>,23:21]
[@111,369:372='foob',<IDENT>,24:8]
[@112,373:373=';',<';'>,24:12]
[@113,379:379='}',<'}'>,25:4]
[@114,381:384='else',<'else'>,25:6]
[@115,386:386='{',<'{'>,25:11]
[@116,396:396='-',<'-'>,26:8]
[@117,397:397='!',<'!'>,26:9]
[@118,398:398='-',<'-'>,26:10]
[@119,399:399='x',<IDENT>,26:11]
[@120,400:400=';',<';'>,26:12]
[@121,406:406='}',<'}'>,27:4]
[@122,407:407=';',<';'>,27:5]
[@123,414:416='let',<'let'>,29:4]
[@124,418:418='a',<IDENT>,29:8]
[@125,419:419=':',<':'>,29:9]
[@126,421:421='[',<'['>,29:11]
[@127,422:424='int',<TYPE>,29:12]
[@128,425:425=']',<']'>,29:15]
[@129,427:427='=',<'='>,29:17]
[@130,429:429='[',<'['>,29:19]
[@131,430:430=']',<']'>,29:20]
[@132,431:431=';',<';'>,29:21]
[@133,437:437='a',<IDENT>,30:4]
[@134,439:439='=',<'='>,30:6]
[@135,441:441='[',<'['>,30:8]
[@136,442:442='1',<NUMBER>,30:9]
[@137,443:443=',',<','>,30:10]
[@138,445:445='2',<NUMBER>,30:12]
[@139,446:446=',',<','>,30:13]
[@140,448:448='3',<NUMBER>,30:15]
[@141,449:449=']',<']'>,30:16]
[@142,450:450=';',<';'>,30:17]
[@143,456:456='x',<IDENT>,31:4]
[@144,458:458='=',<'='>,31:6]
[@145,460:460='a',<IDENT>,31:8]
[@146,461:461='[',<'['>,31:9]
[@147,462:462='0',<NUMBER>,31:10]
[@148,463:463=']',<']'>,31:11]
[@149,464:464=';',<';'>,31:12]
[@150,470:470='x',<IDENT>,32:4]
[@151,472:472='=',<'='>,32:6]
[@152,474:474='a',<IDENT>,32:8]
[@153,475:475='[',<'['>,32:9]
[@154,476:476='1',<NUMBER>,32:10]
[@155,478:478='+',<'+'>,32:12]
[@156,480:480='1',<NUMBER>,32:14]
[@157,481:481=']',<']'>,32:15]
[@158,482:482=';',<';'>,32:16]
[@159,489:491='foo',<IDENT>,34:4]
[@160,492:492='(',<'('>,34:7]
[@161,493:493=')',<')'>,34:8]
[@162,494:494=';',<';'>,34:9]
[@163,500:502='bar',<IDENT>,35:4]
[@164,503:503='(',<'('>,35:7]
[@165,504:504='x',<IDENT>,35:8]
[@166,505:505=')',<')'>,35:9]
[@167,506:506=';',<';'>,35:10]
[@168,512:514='baz',<IDENT>,36:4]
[@169,515:515='(',<'('>,36:7]
[@170,516:516='x',<IDENT>,36:8]
[@171,517:517=',',<','>,36:9]
[@172,519:519='y',<IDENT>,36:11]
[@173,520:520=')',<')'>,36:12]
[@174,521:521=';',<';'>,36:13]
[@175,527:529='let',<'let'>,37:4]
[@176,531:531='y',<IDENT>,37:8]
[@177,532:532=':',<':'>,37:9]
[@178,534:536='int',<TYPE>,37:11]
[@179,537:537=';',<';'>,37:14]
[@180,543:545='let',<'let'>,38:4]
[@181,547:547='c',<IDENT>,38:8]
[@182,548:548=':',<':'>,38:9]
[@183,550:553='char',<TYPE>,38:11]
[@184,555:555='=',<'='>,38:16]
[@185,557:559=''c'',<CHAR>,38:18]
[@186,560:560=';',<';'>,38:21]
[@187,566:566='c',<IDENT>,39:4]
[@188,568:568='=',<'='>,39:6]
[@189,570:573=''\n'',<CHAR>,39:8]
[@190,574:574=';',<';'>,39:12]
[@191,576:576='}',<'}'>,40:0]
[@192,577:577=';',<';'>,40:1]
[@193,580:581='fn',<'fn'>,42:0]
[@194,583:585='foo',<IDENT>,42:3]
[@195,586:586='(',<'('>,42:6]
[@196,587:587=')',<')'>,42:7]
[@197,589:590='->',<'->'>,42:9]
[@198,592:594='int',<TYPE>,42:12]
[@199,596:596='{',<'{'>,42:16]
[@200,602:602='3',<NUMBER>,43:4]
[@201,604:604='+',<'+'>,43:6]
[@202,606:606='3',<NUMBER>,43:8]
[@203,607:607=';',<';'>,43:9]
[@204,609:609='}',<'}'>,44:0]
[@205,610:610=';',<';'>,44:1]
[@206,626:627='fn',<'fn'>,47:0]
[@207,629:631='bar',<IDENT>,47:3]
[@208,632:632='(',<'('>,47:6]
[@209,633:633='x',<IDENT>,47:7]
[@210,634:634=':',<':'>,47:8]
[@211,636:638='int',<TYPE>,47:10]
[@212,639:639=')',<')'>,47:13]
[@213,641:641='{',<'{'>,47:15]
[@214,642:642='}',<'}'>,47:16]
[@215,643:643=';',<';'>,47:17]
[@216,646:647='fn',<'fn'>,49:0]
[@217,649:651='baz',<IDENT>,49:3]
[@218,652:652='(',<'('>,49:6]
[@219,653:653='x',<IDENT>,49:7]
[@220,654:654=':',<':'>,49:8]
[@221,656:658='int',<TYPE>,49:10]
[@222,659:659=',',<','>,49:13]
[@223,661:661='y',<IDENT>,49:15]
[@224,662:662=':',<':'>,49:16]
[@225,664:666='int',<TYPE>,49:18]
[@226,667:667=')',<')'>,49:21]
[@227,669:669='{',<'{'>,49:23]
[@228,670:670='}',<'}'>,49:24]
[@229,671:671=';',<';'>,49:25]
[@230,673:672='<EOF>',<EOF>,50:0]
(program (stmt_list (stmt (extern_decl extern (proto fn putchar ( (typed_decl x : (type_antn int)) )))) ; (stmt (fn_decl (proto fn main ( )) (block { (stmt_list (stmt (let_stmt let (typed_decl x : (type_antn int)) = (expr (expr (primary_expr (lit_expr 2))) + (expr (expr (primary_expr (lit_expr 5))) * (expr (primary_expr (lit_expr 4))))))) ; (stmt (for_stmt for (typed_decl i : (type_antn int)) = (expr (primary_expr (lit_expr 1))) ; (expr (expr (primary_expr (ident_expr i))) < (expr (primary_expr (ident_expr x)))) ; 1 (block { (stmt_list (stmt (expr (ident_expr x) = (expr (expr (primary_expr (paren_expr ( (expr (expr (primary_expr (lit_expr 3))) - (expr (primary_expr (lit_expr 4)))) )))) / (expr (primary_expr (lit_expr 2)))))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) > (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (ident_expr x) = (expr (primary_expr (lit_expr 8))))) ;) }))))) ;) }))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) > (expr (primary_expr (lit_expr 3)))) (block { (stmt_list (stmt (let_stmt let (typed_decl y : (type_antn int)) = (expr (primary_expr (lit_expr 2))))) ; (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr y))))))) ;) }) else (block { (stmt_list (stmt (expr (expr (primary_expr (ident_expr x))) + (expr (expr (primary_expr (lit_expr 1))) * (expr (primary_expr (lit_expr 4)))))) ;) }))))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) == (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr x))))))) ;) }) else (cond_expr if (expr (expr (primary_expr (ident_expr x))) > (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (ident_expr foo)))) ;) }) else (cond_expr if (expr (expr (primary_expr (ident_expr x))) < (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (ident_expr foob)))) ;) }) else (block { (stmt_list (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (unop_expr ! (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr x))))))))))))) ;) }))))))) ; (stmt (let_stmt let (typed_decl a : (type_antn [ int ])) = (expr (primary_expr (lit_expr (array_lit [ ])))))) ; (stmt (expr (ident_expr a) = (expr (primary_expr (lit_expr (array_lit [ (expr_list (expr (primary_expr (lit_expr 1))) , (expr (primary_expr (lit_expr 2))) , (expr (primary_expr (lit_expr 3)))) ])))))) ; (stmt (expr (ident_expr x) = (expr (primary_expr (primary_expr (ident_expr a)) [ (expr (primary_expr (lit_expr 0))) ])))) ; (stmt (expr (ident_expr x) = (expr (primary_expr (primary_expr (ident_expr a)) [ (expr (expr (primary_expr (lit_expr 1))) + (expr (primary_expr (lit_expr 1)))) ])))) ; (stmt (expr (primary_expr (call_expr foo ( ))))) ; (stmt (expr (primary_expr (call_expr bar ( (expr_list (expr (primary_expr (ident_expr x)))) ))))) ; (stmt (expr (primary_expr (call_expr baz ( (expr_list (expr (primary_expr (ident_expr x))) , (expr (primary_expr (ident_expr y)))) ))))) ; (stmt (let_stmt let (typed_decl y : (type_antn int)))) ; (stmt (let_stmt let (typed_decl c : (type_antn char)) = (expr (primary_expr (lit_expr (char_lit 'c')))))) ; (stmt (expr (ident_expr c) = (expr (primary_expr (lit_expr (char_lit '\n')))))) ;) }))) ; (stmt (fn_decl (proto fn foo ( ) -> (type_antn int)) (block { (stmt_list (stmt (expr (expr (primary_expr (lit_expr 3))) + (expr (primary_expr (lit_expr 3))))) ;) }))) ; (stmt (fn_decl (proto fn bar ( (typed_decl x : (type_antn int)) )) (block { }))) ; (stmt (fn_decl (proto fn baz ( (typed_decl x : (type_antn int)) , (typed_decl y : (type_antn int)) )) (block { }))) ;))
