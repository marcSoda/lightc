[@0,54:59='module',<'module'>,2:0]
[@1,61:64='main',<IDENT>,2:7]
[@2,65:65=';',<';'>,2:11]
[@3,68:70='use',<'use'>,4:0]
[@4,72:75='core',<IDENT>,4:4]
[@5,76:76=';',<';'>,4:8]
[@6,78:80='use',<'use'>,5:0]
[@7,82:89='foo::bar',<IDENT>,5:4]
[@8,90:90=';',<';'>,5:12]
[@9,93:98='extern',<'extern'>,7:0]
[@10,100:101='fn',<'fn'>,7:7]
[@11,103:109='putchar',<IDENT>,7:10]
[@12,110:110='(',<'('>,7:17]
[@13,111:111='x',<IDENT>,7:18]
[@14,112:112=':',<':'>,7:19]
[@15,114:116='int',<TYPE>,7:21]
[@16,117:117=')',<')'>,7:24]
[@17,118:118=';',<';'>,7:25]
[@18,121:122='fn',<'fn'>,9:0]
[@19,124:126='foo',<IDENT>,9:3]
[@20,127:127='(',<'('>,9:6]
[@21,128:128=')',<')'>,9:7]
[@22,130:131='->',<'->'>,9:9]
[@23,133:135='int',<TYPE>,9:12]
[@24,137:137='{',<'{'>,9:16]
[@25,143:143='3',<NUMBER>,10:4]
[@26,145:145='+',<'+'>,10:6]
[@27,147:147='3',<NUMBER>,10:8]
[@28,148:148=';',<';'>,10:9]
[@29,150:150='}',<'}'>,11:0]
[@30,151:151=';',<';'>,11:1]
[@31,167:168='fn',<'fn'>,14:0]
[@32,170:172='bar',<IDENT>,14:3]
[@33,173:173='(',<'('>,14:6]
[@34,174:174='x',<IDENT>,14:7]
[@35,175:175=':',<':'>,14:8]
[@36,177:179='int',<TYPE>,14:10]
[@37,180:180=')',<')'>,14:13]
[@38,182:182='{',<'{'>,14:15]
[@39,183:183='}',<'}'>,14:16]
[@40,184:184=';',<';'>,14:17]
[@41,187:188='fn',<'fn'>,16:0]
[@42,190:192='baz',<IDENT>,16:3]
[@43,193:193='(',<'('>,16:6]
[@44,194:194='x',<IDENT>,16:7]
[@45,195:195=':',<':'>,16:8]
[@46,197:199='int',<TYPE>,16:10]
[@47,200:200=',',<','>,16:13]
[@48,202:202='y',<IDENT>,16:15]
[@49,203:203=':',<':'>,16:16]
[@50,205:207='int',<TYPE>,16:18]
[@51,208:208=')',<')'>,16:21]
[@52,210:210='{',<'{'>,16:23]
[@53,211:211='}',<'}'>,16:24]
[@54,212:212=';',<';'>,16:25]
[@55,215:216='fn',<'fn'>,18:0]
[@56,218:221='main',<IDENT>,18:3]
[@57,222:222='(',<'('>,18:7]
[@58,223:223=')',<')'>,18:8]
[@59,225:225='{',<'{'>,18:10]
[@60,231:233='let',<'let'>,19:4]
[@61,235:235='x',<IDENT>,19:8]
[@62,236:236=':',<':'>,19:9]
[@63,238:240='int',<TYPE>,19:11]
[@64,242:242='=',<'='>,19:15]
[@65,244:244='2',<NUMBER>,19:17]
[@66,246:246='+',<'+'>,19:19]
[@67,248:248='5',<NUMBER>,19:21]
[@68,250:250='*',<'*'>,19:23]
[@69,252:252='4',<NUMBER>,19:25]
[@70,253:253=';',<';'>,19:26]
[@71,259:261='for',<'for'>,20:4]
[@72,263:263='i',<IDENT>,20:8]
[@73,264:264=':',<':'>,20:9]
[@74,266:268='int',<TYPE>,20:11]
[@75,270:270='=',<'='>,20:15]
[@76,272:272='1',<NUMBER>,20:17]
[@77,273:273=';',<';'>,20:18]
[@78,275:275='i',<IDENT>,20:20]
[@79,277:277='<',<'<'>,20:22]
[@80,279:279='x',<IDENT>,20:24]
[@81,280:280=';',<';'>,20:25]
[@82,282:282='1',<NUMBER>,20:27]
[@83,284:284='{',<'{'>,20:29]
[@84,294:294='x',<IDENT>,21:8]
[@85,296:296='=',<'='>,21:10]
[@86,298:298='(',<'('>,21:12]
[@87,299:299='3',<NUMBER>,21:13]
[@88,301:301='-',<'-'>,21:15]
[@89,303:303='4',<NUMBER>,21:17]
[@90,304:304=')',<')'>,21:18]
[@91,306:306='/',<'/'>,21:20]
[@92,308:308='2',<NUMBER>,21:22]
[@93,309:309=';',<';'>,21:23]
[@94,319:320='if',<'if'>,22:8]
[@95,322:322='x',<IDENT>,22:11]
[@96,324:324='>',<'>'>,22:13]
[@97,326:327='10',<NUMBER>,22:15]
[@98,329:329='{',<'{'>,22:18]
[@99,343:343='x',<IDENT>,23:12]
[@100,345:345='=',<'='>,23:14]
[@101,347:347='8',<NUMBER>,23:16]
[@102,348:348=';',<';'>,23:17]
[@103,358:358='}',<'}'>,24:8]
[@104,359:359=';',<';'>,24:9]
[@105,365:365='}',<'}'>,25:4]
[@106,366:366=';',<';'>,25:5]
[@107,373:374='if',<'if'>,27:4]
[@108,376:376='x',<IDENT>,27:7]
[@109,378:379='>=',<'>='>,27:9]
[@110,381:381='3',<NUMBER>,27:12]
[@111,383:383='{',<'{'>,27:14]
[@112,393:395='let',<'let'>,28:8]
[@113,397:397='y',<IDENT>,28:12]
[@114,398:398=':',<':'>,28:13]
[@115,400:402='int',<TYPE>,28:15]
[@116,404:404='=',<'='>,28:19]
[@117,406:406='2',<NUMBER>,28:21]
[@118,407:407=';',<';'>,28:22]
[@119,417:417='-',<'-'>,29:8]
[@120,418:418='y',<IDENT>,29:9]
[@121,419:419=';',<';'>,29:10]
[@122,425:425='}',<'}'>,30:4]
[@123,427:430='else',<'else'>,30:6]
[@124,432:432='{',<'{'>,30:11]
[@125,442:442='x',<IDENT>,31:8]
[@126,444:444='+',<'+'>,31:10]
[@127,446:446='1',<NUMBER>,31:12]
[@128,448:448='*',<'*'>,31:14]
[@129,450:450='4',<NUMBER>,31:16]
[@130,451:451=';',<';'>,31:17]
[@131,457:457='}',<'}'>,32:4]
[@132,458:458=';',<';'>,32:5]
[@133,465:466='if',<'if'>,34:4]
[@134,468:468='x',<IDENT>,34:7]
[@135,470:471='==',<'=='>,34:9]
[@136,473:474='10',<NUMBER>,34:12]
[@137,476:476='{',<'{'>,34:15]
[@138,486:486='-',<'-'>,35:8]
[@139,487:487='x',<IDENT>,35:9]
[@140,488:488=';',<';'>,35:10]
[@141,494:494='}',<'}'>,36:4]
[@142,496:499='else',<'else'>,36:6]
[@143,501:502='if',<'if'>,36:11]
[@144,504:504='x',<IDENT>,36:14]
[@145,506:506='>',<'>'>,36:16]
[@146,508:509='10',<NUMBER>,36:18]
[@147,511:511='{',<'{'>,36:21]
[@148,521:523='foo',<IDENT>,37:8]
[@149,524:524=';',<';'>,37:11]
[@150,530:530='}',<'}'>,38:4]
[@151,532:535='else',<'else'>,38:6]
[@152,537:538='if',<'if'>,38:11]
[@153,540:540='x',<IDENT>,38:14]
[@154,542:542='<',<'<'>,38:16]
[@155,544:545='10',<NUMBER>,38:18]
[@156,547:547='{',<'{'>,38:21]
[@157,557:560='foob',<IDENT>,39:8]
[@158,561:561=';',<';'>,39:12]
[@159,567:567='}',<'}'>,40:4]
[@160,569:572='else',<'else'>,40:6]
[@161,574:574='{',<'{'>,40:11]
[@162,584:584='-',<'-'>,41:8]
[@163,585:585='!',<'!'>,41:9]
[@164,586:586='-',<'-'>,41:10]
[@165,587:587='x',<IDENT>,41:11]
[@166,588:588=';',<';'>,41:12]
[@167,594:594='}',<'}'>,42:4]
[@168,595:595=';',<';'>,42:5]
[@169,602:604='let',<'let'>,44:4]
[@170,606:606='a',<IDENT>,44:8]
[@171,607:607=':',<':'>,44:9]
[@172,609:609='[',<'['>,44:11]
[@173,610:612='int',<TYPE>,44:12]
[@174,613:613=']',<']'>,44:15]
[@175,615:615='=',<'='>,44:17]
[@176,617:617='[',<'['>,44:19]
[@177,618:618=']',<']'>,44:20]
[@178,619:619=';',<';'>,44:21]
[@179,625:625='a',<IDENT>,45:4]
[@180,627:627='=',<'='>,45:6]
[@181,629:629='[',<'['>,45:8]
[@182,630:630='1',<NUMBER>,45:9]
[@183,631:631=',',<','>,45:10]
[@184,633:633='2',<NUMBER>,45:12]
[@185,634:634=',',<','>,45:13]
[@186,636:636='3',<NUMBER>,45:15]
[@187,637:637=']',<']'>,45:16]
[@188,638:638=';',<';'>,45:17]
[@189,644:644='x',<IDENT>,46:4]
[@190,646:646='=',<'='>,46:6]
[@191,648:648='a',<IDENT>,46:8]
[@192,649:649='[',<'['>,46:9]
[@193,650:650='0',<NUMBER>,46:10]
[@194,651:651=']',<']'>,46:11]
[@195,652:652=';',<';'>,46:12]
[@196,658:658='x',<IDENT>,47:4]
[@197,660:660='=',<'='>,47:6]
[@198,662:662='a',<IDENT>,47:8]
[@199,663:663='[',<'['>,47:9]
[@200,664:664='1',<NUMBER>,47:10]
[@201,666:666='+',<'+'>,47:12]
[@202,668:668='1',<NUMBER>,47:14]
[@203,669:669=']',<']'>,47:15]
[@204,670:670=';',<';'>,47:16]
[@205,677:679='foo',<IDENT>,49:4]
[@206,680:680='(',<'('>,49:7]
[@207,681:681=')',<')'>,49:8]
[@208,682:682=';',<';'>,49:9]
[@209,688:690='bar',<IDENT>,50:4]
[@210,691:691='(',<'('>,50:7]
[@211,692:692='x',<IDENT>,50:8]
[@212,693:693=')',<')'>,50:9]
[@213,694:694=';',<';'>,50:10]
[@214,700:702='baz',<IDENT>,51:4]
[@215,703:703='(',<'('>,51:7]
[@216,704:704='x',<IDENT>,51:8]
[@217,705:705=',',<','>,51:9]
[@218,707:707='y',<IDENT>,51:11]
[@219,708:708=')',<')'>,51:12]
[@220,709:709=';',<';'>,51:13]
[@221,715:717='let',<'let'>,52:4]
[@222,719:719='y',<IDENT>,52:8]
[@223,720:720=':',<':'>,52:9]
[@224,722:724='int',<TYPE>,52:11]
[@225,725:725=';',<';'>,52:14]
[@226,731:733='let',<'let'>,53:4]
[@227,735:735='c',<IDENT>,53:8]
[@228,736:736=':',<':'>,53:9]
[@229,738:741='char',<TYPE>,53:11]
[@230,743:743='=',<'='>,53:16]
[@231,745:747=''c'',<CHAR>,53:18]
[@232,748:748=';',<';'>,53:21]
[@233,754:754='c',<IDENT>,54:4]
[@234,756:756='=',<'='>,54:6]
[@235,758:761=''\n'',<CHAR>,54:8]
[@236,762:762=';',<';'>,54:12]
[@237,769:769='i',<IDENT>,56:4]
[@238,771:772='+=',<'+='>,56:6]
[@239,774:774='1',<NUMBER>,56:9]
[@240,775:775=';',<';'>,56:10]
[@241,782:782='x',<IDENT>,58:4]
[@242,783:783='.',<'.'>,58:5]
[@243,784:789='method',<IDENT>,58:6]
[@244,790:790='(',<'('>,58:12]
[@245,791:791=')',<')'>,58:13]
[@246,792:792=';',<';'>,58:14]
[@247,798:798='x',<IDENT>,59:4]
[@248,799:799='.',<'.'>,59:5]
[@249,800:804='field',<IDENT>,59:6]
[@250,806:807='+=',<'+='>,59:12]
[@251,809:809='1',<NUMBER>,59:15]
[@252,810:810=';',<';'>,59:16]
[@253,817:820='loop',<'loop'>,61:4]
[@254,822:822='{',<'{'>,61:9]
[@255,832:834='let',<'let'>,62:8]
[@256,836:836='i',<IDENT>,62:12]
[@257,837:837=':',<':'>,62:13]
[@258,839:841='int',<TYPE>,62:15]
[@259,843:843='=',<'='>,62:19]
[@260,845:845='0',<NUMBER>,62:21]
[@261,846:846=';',<';'>,62:22]
[@262,856:856='i',<IDENT>,63:8]
[@263,858:859='+=',<'+='>,63:10]
[@264,861:861='1',<NUMBER>,63:13]
[@265,862:862=';',<';'>,63:14]
[@266,872:873='if',<'if'>,64:8]
[@267,875:875='i',<IDENT>,64:11]
[@268,877:878='==',<'=='>,64:13]
[@269,880:880='3',<NUMBER>,64:16]
[@270,882:882='{',<'{'>,64:18]
[@271,896:900='break',<'break'>,65:12]
[@272,901:901=';',<';'>,65:17]
[@273,911:911='}',<'}'>,66:8]
[@274,912:912=';',<';'>,66:9]
[@275,918:918='}',<'}'>,67:4]
[@276,919:919=';',<';'>,67:5]
[@277,921:921='}',<'}'>,68:0]
[@278,922:922=';',<';'>,68:1]
[@279,925:930='struct',<'struct'>,70:0]
[@280,932:934='Foo',<IDENT>,70:7]
[@281,936:936='{',<'{'>,70:11]
[@282,942:944='let',<'let'>,71:4]
[@283,946:948='bar',<IDENT>,71:8]
[@284,949:949=':',<':'>,71:11]
[@285,951:953='int',<TYPE>,71:13]
[@286,954:954=';',<';'>,71:16]
[@287,960:962='let',<'let'>,72:4]
[@288,964:966='baz',<IDENT>,72:8]
[@289,967:967=':',<':'>,72:11]
[@290,969:973='float',<TYPE>,72:13]
[@291,975:975='=',<'='>,72:19]
[@292,977:979='1.0',<NUMBER>,72:21]
[@293,980:980=';',<';'>,72:24]
[@294,987:988='fn',<'fn'>,74:4]
[@295,990:995='method',<IDENT>,74:7]
[@296,996:996='(',<'('>,74:13]
[@297,997:997=')',<')'>,74:14]
[@298,999:999='{',<'{'>,74:16]
[@299,1009:1012='self',<'self'>,75:8]
[@300,1013:1013='.',<'.'>,75:12]
[@301,1014:1016='bar',<IDENT>,75:13]
[@302,1018:1018='=',<'='>,75:17]
[@303,1020:1023='self',<'self'>,75:19]
[@304,1024:1024='.',<'.'>,75:23]
[@305,1025:1027='bar',<IDENT>,75:24]
[@306,1029:1029='+',<'+'>,75:28]
[@307,1031:1031='1',<NUMBER>,75:30]
[@308,1032:1032=';',<';'>,75:31]
[@309,1038:1038='}',<'}'>,76:4]
[@310,1039:1039=';',<';'>,76:5]
[@311,1041:1041='}',<'}'>,77:0]
[@312,1042:1042=';',<';'>,77:1]
[@313,1044:1043='<EOF>',<EOF>,78:0]
(program (mod_decl module main ;) (stmt_list (stmt (use_stmt use core)) ; (stmt (use_stmt use foo::bar)) ; (stmt (extern_decl extern (proto fn putchar ( (typed_decl x : (type_antn int)) )))) ; (stmt (fn_decl (proto fn foo ( ) -> (type_antn int)) (block { (stmt_list (stmt (expr (expr (primary_expr (lit_expr 3))) + (expr (primary_expr (lit_expr 3))))) ;) }))) ; (stmt (fn_decl (proto fn bar ( (typed_decl x : (type_antn int)) )) (block { }))) ; (stmt (fn_decl (proto fn baz ( (typed_decl x : (type_antn int)) , (typed_decl y : (type_antn int)) )) (block { }))) ; (stmt (fn_decl (proto fn main ( )) (block { (stmt_list (stmt (let_stmt let (var_init (typed_decl x : (type_antn int)) = (expr (expr (primary_expr (lit_expr 2))) + (expr (expr (primary_expr (lit_expr 5))) * (expr (primary_expr (lit_expr 4)))))))) ; (stmt (for_stmt for (var_init (typed_decl i : (type_antn int)) = (expr (primary_expr (lit_expr 1)))) ; (expr (expr (primary_expr (ident_expr i))) < (expr (primary_expr (ident_expr x)))) ; 1 (block { (stmt_list (stmt (expr (assignable_expr (ident_expr x)) = (expr (expr (primary_expr (paren_expr ( (expr (expr (primary_expr (lit_expr 3))) - (expr (primary_expr (lit_expr 4)))) )))) / (expr (primary_expr (lit_expr 2)))))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) > (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (assignable_expr (ident_expr x)) = (expr (primary_expr (lit_expr 8))))) ;) }))))) ;) }))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) >= (expr (primary_expr (lit_expr 3)))) (block { (stmt_list (stmt (let_stmt let (var_init (typed_decl y : (type_antn int)) = (expr (primary_expr (lit_expr 2)))))) ; (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr y))))))) ;) }) else (block { (stmt_list (stmt (expr (expr (primary_expr (ident_expr x))) + (expr (expr (primary_expr (lit_expr 1))) * (expr (primary_expr (lit_expr 4)))))) ;) }))))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) == (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr x))))))) ;) }) else (cond_expr if (expr (expr (primary_expr (ident_expr x))) > (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (ident_expr foo)))) ;) }) else (cond_expr if (expr (expr (primary_expr (ident_expr x))) < (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (ident_expr foob)))) ;) }) else (block { (stmt_list (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (unop_expr ! (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr x))))))))))))) ;) }))))))) ; (stmt (let_stmt let (var_init (typed_decl a : (type_antn [ int ])) = (expr (primary_expr (lit_expr (array_lit [ ]))))))) ; (stmt (expr (assignable_expr (ident_expr a)) = (expr (primary_expr (lit_expr (array_lit [ (expr_list (expr (primary_expr (lit_expr 1))) , (expr (primary_expr (lit_expr 2))) , (expr (primary_expr (lit_expr 3)))) ])))))) ; (stmt (expr (assignable_expr (ident_expr x)) = (expr (primary_expr (primary_expr (ident_expr a)) [ (expr (primary_expr (lit_expr 0))) ])))) ; (stmt (expr (assignable_expr (ident_expr x)) = (expr (primary_expr (primary_expr (ident_expr a)) [ (expr (expr (primary_expr (lit_expr 1))) + (expr (primary_expr (lit_expr 1)))) ])))) ; (stmt (expr (primary_expr (call_expr foo ( ))))) ; (stmt (expr (primary_expr (call_expr bar ( (expr_list (expr (primary_expr (ident_expr x)))) ))))) ; (stmt (expr (primary_expr (call_expr baz ( (expr_list (expr (primary_expr (ident_expr x))) , (expr (primary_expr (ident_expr y)))) ))))) ; (stmt (let_stmt let (var_init (typed_decl y : (type_antn int))))) ; (stmt (let_stmt let (var_init (typed_decl c : (type_antn char)) = (expr (primary_expr (lit_expr (char_lit 'c'))))))) ; (stmt (expr (assignable_expr (ident_expr c)) = (expr (primary_expr (lit_expr (char_lit '\n')))))) ; (stmt (expr (assignable_expr (ident_expr i)) += (expr (primary_expr (lit_expr 1))))) ; (stmt (expr (primary_expr (primary_expr (ident_expr x)) . (call_expr method ( ))))) ; (stmt (expr (assignable_expr (field_selector_expr (primary_expr (ident_expr x)) . (ident_expr field))) += (expr (primary_expr (lit_expr 1))))) ; (stmt (loop_stmt loop (block { (stmt_list (stmt (let_stmt let (var_init (typed_decl i : (type_antn int)) = (expr (primary_expr (lit_expr 0)))))) ; (stmt (expr (assignable_expr (ident_expr i)) += (expr (primary_expr (lit_expr 1))))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr i))) == (expr (primary_expr (lit_expr 3)))) (block { (stmt_list (stmt (break_stmt break)) ;) }))))) ;) }))) ;) }))) ; (stmt (struct_decl struct Foo { (let_stmt let (var_init (typed_decl bar : (type_antn int)))) ; (let_stmt let (var_init (typed_decl baz : (type_antn float)) = (expr (primary_expr (lit_expr 1.0))))) ; (fn_decl (proto fn method ( )) (block { (stmt_list (stmt (expr (assignable_expr (self_expr self . (ident_expr bar))) = (expr (expr (primary_expr (self_expr self . (ident_expr bar)))) + (expr (primary_expr (lit_expr 1)))))) ;) })) ; })) ;))
